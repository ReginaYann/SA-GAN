from SAGAN import SAGAN
import argparse
from utils import *

# 创建一个ArgmentParser对象，包含将命令行解析成python数据类型的全部信息
#这里的关于命令行参数的的内容是参考其它代码的，具体出处在md文档里有写
def parse_args():
    desc = "Self-Attention GAN"
    parser = argparse.ArgumentParser(description=desc)
    parser.add_argument('--phase', type=str, default='train', help='train or test ?')
    parser.add_argument('--dataset', type=str, default='celebA', help='[mnist / cifar10 / celebA]')

    parser.add_argument('--epoch', type=int, default=10, help='The number of epochs to run')
    parser.add_argument('--iteration', type=int, default=100000, help='The number of training iterations')
    parser.add_argument('--batch_size', type=int, default=32, help='The size of batch per gpu')
    parser.add_argument('--print_freq', type=int, default=500, help='The number of image_print_freqy')
    parser.add_argument('--save_freq', type=int, default=500, help='The number of ckpt_save_freq')

    parser.add_argument('--g_lr', type=float, default=0.0001, help='learning rate for generator')
    parser.add_argument('--d_lr', type=float, default=0.0004, help='learning rate for discriminator')
    parser.add_argument('--beta1', type=float, default=0.0, help='beta1 for Adam optimizer')
    parser.add_argument('--beta2', type=float, default=0.9, help='beta2 for Adam optimizer')

    parser.add_argument('--z_dim', type=int, default=128, help='Dimension of noise vector')
    parser.add_argument('--sn', type=str2bool, default=True, help='using spectral norm')
    parser.add_argument('--gan_type', type=str, default='sagan', help='[gan / sagan]')
    parser.add_argument('--ld', type=float, default=10.0, help='The gradient penalty lambda')
    parser.add_argument('--n_critic', type=int, default=1, help='The number of critic')
    parser.add_argument('--img_size', type=int, default=128, help='The size of image')
    parser.add_argument('--sample_num', type=int, default=64, help='The number of sample images')
    parser.add_argument('--test_num', type=int, default=10, help='The number of images generated by the test')
    parser.add_argument('--checkpoint_dir', type=str, default='checkpoint',help='Directory name to save the checkpoints')
    parser.add_argument('--result_dir', type=str, default='results',help='Directory name to save the generated images')
    parser.add_argument('--log_dir', type=str, default='logs',help='Directory name to save training logs')
    parser.add_argument('--sample_dir', type=str, default='samples',help='Directory name to save the samples on training')
    return check_args(parser.parse_args())

#检验相关文件夹是否在路径中存在，若不存在则创建
def check_args(args):
    check_folder(args.checkpoint_dir)
    check_folder(args.result_dir)
    check_folder(args.log_dir)
    check_folder(args.sample_dir)
    # --epoch
    try:
        assert args.epoch >= 1
    except:
        print('number of epochs must be larger than or equal to one')
    # --batch_size
    try:
        assert args.batch_size >= 1
    except:
        print('batch size must be larger than or equal to one')
    return args

"""main"""
def main():
    # parse arguments
    args = parse_args()
    if args is None:
      exit()

    # open session
    #tf.ConfigProto(allow_soft_placement=True):如果指定的设备不存在，允许tf自动分配设备。（我哪里来的GPU，sigh）
    with tf.Session(config=tf.ConfigProto(allow_soft_placement=True)) as sess:
        #建立模型
        gan = SAGAN(sess, args)
        gan.build_model()
        show_all_variables()
        #两个调用命令：train&&test
        if args.phase == 'train' :
            gan.train()
            gan.visualize_results(args.epoch - 1)
            print(" [*] Training finished")
        if args.phase == 'test' :
            gan.test()
            print(" [*] Test finished")

if __name__ == '__main__':
    main()
